/*
 * LIO - Order Management API
 * API de gerenciamento de pedidos da LIO.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.Order;
import io.swagger.client.model.OrderItem;
import io.swagger.client.model.Response;
import io.swagger.client.model.Transaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderManagementApi {
    private ApiClient apiClient;

    public OrderManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for orderAddItem */
    private com.squareup.okhttp.Call orderAddItemCall(String clientId, String accessToken, String merchantId, String id, OrderItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/orders/{id}/items".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderAddItemValidateBeforeCall(String clientId, String accessToken, String merchantId, String id, OrderItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderAddItem(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderAddItem(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderAddItem(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderAddItem(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orderAddItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderAddItemCall(clientId, accessToken, merchantId, id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar a inclusão de um novo item em um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param body  (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Response orderAddItem(String clientId, String accessToken, String merchantId, String id, OrderItem body) throws ApiException {
        ApiResponse<Response> resp = orderAddItemWithHttpInfo(clientId, accessToken, merchantId, id, body);
        return resp.getData();
    }

    /**
     * 
     * Recurso responsável por efetuar a inclusão de um novo item em um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Response> orderAddItemWithHttpInfo(String clientId, String accessToken, String merchantId, String id, OrderItem body) throws ApiException {
        com.squareup.okhttp.Call call = orderAddItemValidateBeforeCall(clientId, accessToken, merchantId, id, body, null, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar a inclusão de um novo item em um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderAddItemAsync(String clientId, String accessToken, String merchantId, String id, OrderItem body, final ApiCallback<Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderAddItemValidateBeforeCall(clientId, accessToken, merchantId, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderCreate */
    private com.squareup.okhttp.Call orderCreateCall(String clientId, String accessToken, String merchantId, Order body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/orders".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderCreateValidateBeforeCall(String clientId, String accessToken, String merchantId, Order body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderCreate(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderCreate(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderCreate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orderCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderCreateCall(clientId, accessToken, merchantId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar a criação de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param body  (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Response orderCreate(String clientId, String accessToken, String merchantId, Order body) throws ApiException {
        ApiResponse<Response> resp = orderCreateWithHttpInfo(clientId, accessToken, merchantId, body);
        return resp.getData();
    }

    /**
     * 
     * Recurso responsável por efetuar a criação de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Response> orderCreateWithHttpInfo(String clientId, String accessToken, String merchantId, Order body) throws ApiException {
        com.squareup.okhttp.Call call = orderCreateValidateBeforeCall(clientId, accessToken, merchantId, body, null, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar a criação de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderCreateAsync(String clientId, String accessToken, String merchantId, Order body, final ApiCallback<Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderCreateValidateBeforeCall(clientId, accessToken, merchantId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderDelete */
    private com.squareup.okhttp.Call orderDeleteCall(String clientId, String accessToken, String merchantId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderDeleteValidateBeforeCall(String clientId, String accessToken, String merchantId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderDelete(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderDelete(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderDeleteCall(clientId, accessToken, merchantId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar a exclusão de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void orderDelete(String clientId, String accessToken, String merchantId, String id) throws ApiException {
        orderDeleteWithHttpInfo(clientId, accessToken, merchantId, id);
    }

    /**
     * 
     * Recurso responsável por efetuar a exclusão de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> orderDeleteWithHttpInfo(String clientId, String accessToken, String merchantId, String id) throws ApiException {
        com.squareup.okhttp.Call call = orderDeleteValidateBeforeCall(clientId, accessToken, merchantId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar a exclusão de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderDeleteAsync(String clientId, String accessToken, String merchantId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderDeleteValidateBeforeCall(clientId, accessToken, merchantId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for orderDeleteItem */
    private com.squareup.okhttp.Call orderDeleteItemCall(String clientId, String accessToken, String merchantId, String id, String itemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/{id}/items/{itemId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderDeleteItemValidateBeforeCall(String clientId, String accessToken, String merchantId, String id, String itemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderDeleteItem(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderDeleteItem(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderDeleteItem(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderDeleteItem(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling orderDeleteItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderDeleteItemCall(clientId, accessToken, merchantId, id, itemId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar a exclusão de um item de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param itemId Identificador do item do pedido. (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Response orderDeleteItem(String clientId, String accessToken, String merchantId, String id, String itemId) throws ApiException {
        ApiResponse<Response> resp = orderDeleteItemWithHttpInfo(clientId, accessToken, merchantId, id, itemId);
        return resp.getData();
    }

    /**
     * 
     * Recurso responsável por efetuar a exclusão de um item de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param itemId Identificador do item do pedido. (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Response> orderDeleteItemWithHttpInfo(String clientId, String accessToken, String merchantId, String id, String itemId) throws ApiException {
        com.squareup.okhttp.Call call = orderDeleteItemValidateBeforeCall(clientId, accessToken, merchantId, id, itemId, null, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar a exclusão de um item de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param itemId Identificador do item do pedido. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderDeleteItemAsync(String clientId, String accessToken, String merchantId, String id, String itemId, final ApiCallback<Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderDeleteItemValidateBeforeCall(clientId, accessToken, merchantId, id, itemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderGet */
    private com.squareup.okhttp.Call orderGetCall(String clientId, String accessToken, String merchantId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderGetValidateBeforeCall(String clientId, String accessToken, String merchantId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderGet(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderGetCall(clientId, accessToken, merchantId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar a consulta de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order orderGet(String clientId, String accessToken, String merchantId, String id) throws ApiException {
        ApiResponse<Order> resp = orderGetWithHttpInfo(clientId, accessToken, merchantId, id);
        return resp.getData();
    }

    /**
     * 
     * Recurso responsável por efetuar a consulta de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> orderGetWithHttpInfo(String clientId, String accessToken, String merchantId, String id) throws ApiException {
        com.squareup.okhttp.Call call = orderGetValidateBeforeCall(clientId, accessToken, merchantId, id, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar a consulta de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderGetAsync(String clientId, String accessToken, String merchantId, String id, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderGetValidateBeforeCall(clientId, accessToken, merchantId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderGetByParameters */
    private com.squareup.okhttp.Call orderGetByParametersCall(String clientId, String accessToken, String merchantId, String parameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parameters", parameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderGetByParametersValidateBeforeCall(String clientId, String accessToken, String merchantId, String parameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderGetByParameters(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderGetByParameters(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderGetByParameters(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling orderGetByParameters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderGetByParametersCall(clientId, accessToken, merchantId, parameters, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param parameters Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void orderGetByParameters(String clientId, String accessToken, String merchantId, String parameters) throws ApiException {
        orderGetByParametersWithHttpInfo(clientId, accessToken, merchantId, parameters);
    }

    /**
     * 
     * Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param parameters Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> orderGetByParametersWithHttpInfo(String clientId, String accessToken, String merchantId, String parameters) throws ApiException {
        com.squareup.okhttp.Call call = orderGetByParametersValidateBeforeCall(clientId, accessToken, merchantId, parameters, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param parameters Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderGetByParametersAsync(String clientId, String accessToken, String merchantId, String parameters, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderGetByParametersValidateBeforeCall(clientId, accessToken, merchantId, parameters, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for orderGetItem */
    private com.squareup.okhttp.Call orderGetItemCall(String clientId, String accessToken, String merchantId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/{id}/items".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderGetItemValidateBeforeCall(String clientId, String accessToken, String merchantId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderGetItem(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderGetItem(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderGetItem(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderGetItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderGetItemCall(clientId, accessToken, merchantId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar a consulta de um item em um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @return OrderItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderItem orderGetItem(String clientId, String accessToken, String merchantId, String id) throws ApiException {
        ApiResponse<OrderItem> resp = orderGetItemWithHttpInfo(clientId, accessToken, merchantId, id);
        return resp.getData();
    }

    /**
     * 
     * Recurso responsável por efetuar a consulta de um item em um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @return ApiResponse&lt;OrderItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderItem> orderGetItemWithHttpInfo(String clientId, String accessToken, String merchantId, String id) throws ApiException {
        com.squareup.okhttp.Call call = orderGetItemValidateBeforeCall(clientId, accessToken, merchantId, id, null, null);
        Type localVarReturnType = new TypeToken<OrderItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar a consulta de um item em um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderGetItemAsync(String clientId, String accessToken, String merchantId, String id, final ApiCallback<OrderItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderGetItemValidateBeforeCall(clientId, accessToken, merchantId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderGetTransactions */
    private com.squareup.okhttp.Call orderGetTransactionsCall(String clientId, String accessToken, String merchantId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/{id}/transactions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderGetTransactionsValidateBeforeCall(String clientId, String accessToken, String merchantId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderGetTransactions(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderGetTransactions(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderGetTransactions(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderGetTransactions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderGetTransactionsCall(clientId, accessToken, merchantId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar a consulta das transações de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transaction orderGetTransactions(String clientId, String accessToken, String merchantId, String id) throws ApiException {
        ApiResponse<Transaction> resp = orderGetTransactionsWithHttpInfo(clientId, accessToken, merchantId, id);
        return resp.getData();
    }

    /**
     * 
     * Recurso responsável por efetuar a consulta das transações de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transaction> orderGetTransactionsWithHttpInfo(String clientId, String accessToken, String merchantId, String id) throws ApiException {
        com.squareup.okhttp.Call call = orderGetTransactionsValidateBeforeCall(clientId, accessToken, merchantId, id, null, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar a consulta das transações de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderGetTransactionsAsync(String clientId, String accessToken, String merchantId, String id, final ApiCallback<Transaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderGetTransactionsValidateBeforeCall(clientId, accessToken, merchantId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderUpdate */
    private com.squareup.okhttp.Call orderUpdateCall(String clientId, String accessToken, String merchantId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderUpdateValidateBeforeCall(String clientId, String accessToken, String merchantId, String id, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderUpdate(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderUpdate(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderUpdate(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderUpdate(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling orderUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderUpdateCall(clientId, accessToken, merchantId, id, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar o cancelamento de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param operation Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void orderUpdate(String clientId, String accessToken, String merchantId, String id, String operation) throws ApiException {
        orderUpdateWithHttpInfo(clientId, accessToken, merchantId, id, operation);
    }

    /**
     * 
     * Recurso responsável por efetuar o cancelamento de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param operation Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> orderUpdateWithHttpInfo(String clientId, String accessToken, String merchantId, String id, String operation) throws ApiException {
        com.squareup.okhttp.Call call = orderUpdateValidateBeforeCall(clientId, accessToken, merchantId, id, operation, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar o cancelamento de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param operation Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderUpdateAsync(String clientId, String accessToken, String merchantId, String id, String operation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderUpdateValidateBeforeCall(clientId, accessToken, merchantId, id, operation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for orderUpdateItem */
    private com.squareup.okhttp.Call orderUpdateItemCall(String clientId, String accessToken, String merchantId, String id, String itemId, OrderItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/orders/{id}/items/{itemId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client-id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access-token", apiClient.parameterToString(accessToken));
        if (merchantId != null)
        localVarHeaderParams.put("merchant-id", apiClient.parameterToString(merchantId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "merchant-id", "access-token", "client-id" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderUpdateItemValidateBeforeCall(String clientId, String accessToken, String merchantId, String id, String itemId, OrderItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling orderUpdateItem(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling orderUpdateItem(Async)");
        }
        
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling orderUpdateItem(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderUpdateItem(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling orderUpdateItem(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orderUpdateItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = orderUpdateItemCall(clientId, accessToken, merchantId, id, itemId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Recurso responsável por efetuar a alteração de um item de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param itemId Identificador do item do pedido. (required)
     * @param body  (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Response orderUpdateItem(String clientId, String accessToken, String merchantId, String id, String itemId, OrderItem body) throws ApiException {
        ApiResponse<Response> resp = orderUpdateItemWithHttpInfo(clientId, accessToken, merchantId, id, itemId, body);
        return resp.getData();
    }

    /**
     * 
     * Recurso responsável por efetuar a alteração de um item de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param itemId Identificador do item do pedido. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Response> orderUpdateItemWithHttpInfo(String clientId, String accessToken, String merchantId, String id, String itemId, OrderItem body) throws ApiException {
        com.squareup.okhttp.Call call = orderUpdateItemValidateBeforeCall(clientId, accessToken, merchantId, id, itemId, body, null, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recurso responsável por efetuar a alteração de um item de um pedido.
     * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param id Identificador do pedido. (required)
     * @param itemId Identificador do item do pedido. (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderUpdateItemAsync(String clientId, String accessToken, String merchantId, String id, String itemId, OrderItem body, final ApiCallback<Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderUpdateItemValidateBeforeCall(clientId, accessToken, merchantId, id, itemId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
